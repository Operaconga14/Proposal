/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ProposalContract,
  ProposalContractInterface,
} from "../ProposalContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_total_vote_end",
        type: "uint256",
      },
    ],
    name: "create",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentProposal",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "approve",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reject",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pass",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "total_vote_to_end",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "current_state",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "is_active",
            type: "bool",
          },
        ],
        internalType: "struct ProposalContract.Proposal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "getProposal",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "approve",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reject",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pass",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "total_vote_to_end",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "current_state",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "is_active",
            type: "bool",
          },
        ],
        internalType: "struct ProposalContract.Proposal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "new_owner",
        type: "address",
      },
    ],
    name: "setOwners",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "terminateProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "choice",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061183b806100c46000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c7f758a81161005b578063c7f758a8146100d8578063cbff75cb14610108578063db374c3114610138578063dbddc7aa146101545761007d565b80633ca6d1001461008257806341ec68701461009e578063b3f98adc146100bc575b600080fd5b61009c60048036038101906100979190610ec5565b61015e565b005b6100a6610384565b6040516100b391906110cb565b60405180910390f35b6100d660048036038101906100d19190611126565b610533565b005b6100f260048036038101906100ed9190611153565b61084a565b6040516100ff91906110cb565b60405180910390f35b610122600480360381019061011d91906111de565b6109fa565b60405161012f919061121a565b60405180910390f35b610152600480360381019061014d91906111de565b610aa8565b005b61015c610b7c565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e590611292565b60405180910390fd5b600160008082825461020091906112e1565b9250508190555060405180610100016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160008152602001600081526020016000815260200182815260200160001515815260200160011515815250600260008054815260200190815260200160002060008201518160000190816102fb9190611550565b5060208201518160010190816103119190611550565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a81548160ff0219169083151502179055509050505050505050565b61038c610d30565b6002600080548152602001908152602001600020604051806101000160405290816000820180546103bc90611373565b80601f01602080910402602001604051908101604052809291908181526020018280546103e890611373565b80156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b5050505050815260200160018201805461044e90611373565b80601f016020809104026020016040519081016040528092919081815260200182805461047a90611373565b80156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff161515151581525050905090565b60011515600260008054815260200190815260200160002060060160019054906101000a900460ff1615151461059e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105959061166e565b60405180910390fd5b336105a8816109fa565b156105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df906116da565b60405180910390fd5b600060026000805481526020019081526020016000209050600081600401548260030154836002015461061b91906112e1565b61062591906112e1565b90506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018460ff16036106d95760018260020160008282546106aa91906112e1565b925050819055506106b9610ca9565b8260060160006101000a81548160ff021916908315150217905550610775565b60028460ff16036107285760018260030160008282546106f991906112e1565b92505081905550610708610ca9565b8260060160006101000a81548160ff021916908315150217905550610774565b60038460ff160361077357600182600401600082825461074891906112e1565b92505081905550610757610ca9565b8260060160006101000a81548160ff0219169083151502179055505b5b5b600181836005015461078791906116fa565b1480156107b3575060018460ff1614806107a4575060028460ff16145b806107b2575060008460ff16145b5b156108445760008260060160016101000a81548160ff0219169083151502179055506040518060200160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152506003906001610842929190610d79565b505b50505050565b610852610d30565b600260008381526020019081526020016000206040518061010001604052908160008201805461088190611373565b80601f01602080910402602001604051908101604052809291908181526020018280546108ad90611373565b80156108fa5780601f106108cf576101008083540402835291602001916108fa565b820191906000526020600020905b8154815290600101906020018083116108dd57829003601f168201915b5050505050815260200160018201805461091390611373565b80601f016020809104026020016040519081016040528092919081815260200182805461093f90611373565b801561098c5780601f106109615761010080835404028352916020019161098c565b820191906000526020600020905b81548152906001019060200180831161096f57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016006820160019054906101000a900460ff1615151515815250509050919050565b600080600090505b600380549050811015610a9d578273ffffffffffffffffffffffffffffffffffffffff1660038281548110610a3a57610a3961172e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a8a576001915050610aa3565b8080610a959061175d565b915050610a02565b50600090505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f90611292565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0390611292565b60405180910390fd5b60011515600260008054815260200190815260200160002060060160019054906101000a900460ff16151514610c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6e9061166e565b60405180910390fd5b6000600260008054815260200190815260200160002060060160016101000a81548160ff021916908315150217905550565b60008060026000805481526020019081526020016000209050600081600201549050600082600301549050600083600401549050600160028560040154610cf091906117d4565b03610d0557600181610d0291906112e1565b90505b81831180610d1257508181115b15610d24576001945050505050610d2d565b60009450505050505b90565b6040518061010001604052806060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b828054828255906000526020600020908101928215610df2579160200282015b82811115610df15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d99565b5b509050610dff9190610e03565b5090565b5b80821115610e1c576000816000905550600101610e04565b5090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610e4f57610e4e610e2a565b5b8235905067ffffffffffffffff811115610e6c57610e6b610e2f565b5b602083019150836001820283011115610e8857610e87610e34565b5b9250929050565b6000819050919050565b610ea281610e8f565b8114610ead57600080fd5b50565b600081359050610ebf81610e99565b92915050565b600080600080600060608688031215610ee157610ee0610e20565b5b600086013567ffffffffffffffff811115610eff57610efe610e25565b5b610f0b88828901610e39565b9550955050602086013567ffffffffffffffff811115610f2e57610f2d610e25565b5b610f3a88828901610e39565b93509350506040610f4d88828901610eb0565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f94578082015181840152602081019050610f79565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fbc82610f5a565b610fc68185610f65565b9350610fd6818560208601610f76565b610fdf81610fa0565b840191505092915050565b610ff381610e8f565b82525050565b60008115159050919050565b61100e81610ff9565b82525050565b60006101008301600083015184820360008601526110328282610fb1565b9150506020830151848203602086015261104c8282610fb1565b91505060408301516110616040860182610fea565b5060608301516110746060860182610fea565b5060808301516110876080860182610fea565b5060a083015161109a60a0860182610fea565b5060c08301516110ad60c0860182611005565b5060e08301516110c060e0860182611005565b508091505092915050565b600060208201905081810360008301526110e58184611014565b905092915050565b600060ff82169050919050565b611103816110ed565b811461110e57600080fd5b50565b600081359050611120816110fa565b92915050565b60006020828403121561113c5761113b610e20565b5b600061114a84828501611111565b91505092915050565b60006020828403121561116957611168610e20565b5b600061117784828501610eb0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111ab82611180565b9050919050565b6111bb816111a0565b81146111c657600080fd5b50565b6000813590506111d8816111b2565b92915050565b6000602082840312156111f4576111f3610e20565b5b6000611202848285016111c9565b91505092915050565b61121481610ff9565b82525050565b600060208201905061122f600083018461120b565b92915050565b600082825260208201905092915050565b7f4f6e6c79204f776e657200000000000000000000000000000000000000000000600082015250565b600061127c600a83611235565b915061128782611246565b602082019050919050565b600060208201905081810360008301526112ab8161126f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ec82610e8f565b91506112f783610e8f565b925082820190508082111561130f5761130e6112b2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061138b57607f821691505b60208210810361139e5761139d611344565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026114067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826113c9565b61141086836113c9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061144d61144861144384610e8f565b611428565b610e8f565b9050919050565b6000819050919050565b61146783611432565b61147b61147382611454565b8484546113d6565b825550505050565b600090565b611490611483565b61149b81848461145e565b505050565b5b818110156114bf576114b4600082611488565b6001810190506114a1565b5050565b601f821115611504576114d5816113a4565b6114de846113b9565b810160208510156114ed578190505b6115016114f9856113b9565b8301826114a0565b50505b505050565b600082821c905092915050565b600061152760001984600802611509565b1980831691505092915050565b60006115408383611516565b9150826002028217905092915050565b61155982610f5a565b67ffffffffffffffff81111561157257611571611315565b5b61157c8254611373565b6115878282856114c3565b600060209050601f8311600181146115ba57600084156115a8578287015190505b6115b28582611534565b86555061161a565b601f1984166115c8866113a4565b60005b828110156115f0578489015182556001820191506020850194506020810190506115cb565b8683101561160d5784890151611609601f891682611516565b8355505b6001600288020188555050505b505050505050565b7f546869732050726f706f73616c206973206e6f74206163746976650000000000600082015250565b6000611658601b83611235565b915061166382611622565b602082019050919050565b600060208201905081810360008301526116878161164b565b9050919050565b7f416464726573732068617320616c726561647920766f74656400000000000000600082015250565b60006116c4601983611235565b91506116cf8261168e565b602082019050919050565b600060208201905081810360008301526116f3816116b7565b9050919050565b600061170582610e8f565b915061171083610e8f565b9250828203905081811115611728576117276112b2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061176882610e8f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361179a576117996112b2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117df82610e8f565b91506117ea83610e8f565b9250826117fa576117f96117a5565b5b82820690509291505056fea2646970667358221220832052fc6a96f223eb40632380ce8f1441ffc639c0a6827509aa51ffbe49efab64736f6c63430008130033";

type ProposalContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProposalContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProposalContract__factory extends ContractFactory {
  constructor(...args: ProposalContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ProposalContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ProposalContract__factory {
    return super.connect(runner) as ProposalContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProposalContractInterface {
    return new Interface(_abi) as ProposalContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProposalContract {
    return new Contract(address, _abi, runner) as unknown as ProposalContract;
  }
}
